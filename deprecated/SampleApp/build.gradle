plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group 'mypackage'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'mypackage.sampleapp'
    mainClass = 'mypackage.sampleapp.Launcher'
}

javafx {
    version = '17.0.2'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.media']
}

dependencies {
    implementation "org.openjfx:javafx-base:17.0.2"
    implementation "org.openjfx:javafx-controls:17.0.2"
    implementation "org.openjfx:javafx-fxml:17.0.2"
    implementation "org.openjfx:javafx-graphics:17.0.2"
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
        jvmArgs = ['-Dfile.encoding=UTF-8']
    }
}

jlinkZip {
    group = 'distribution'
}

tasks.register('createExe', org.beryx.jlink.JPackageTask) {
    dependsOn jlink
    imageName = "SampleApp"
    appVersion = project.version
    destinationDir = file("$buildDir/installer")
    jvmArgs = ['-Dfile.encoding=UTF-8']
    installerType = "exe"
    installerOptions = [
            "--win-menu",
            "--win-shortcut",
            "--win-dir-chooser",
            "--win-per-user-install"
    ]
    doLast {
        javaexec {
            executable = 'C:/Program Files/Java/jdk-17.0.4/bin/jpackage'
            args = [
                    '--type', 'exe',
                    '--name', 'SampleApp',
                    '--app-version', project.version,
                    '--input', "$buildDir/jlink/image",
                    '--main-jar', "${project.name}-${project.version}-all.jar",
                    '--main-class', application.mainClass.get(),
                    '--dest', "$buildDir/installer",
                    '--icon', 'path/to/your/icon.ico', // Optional
                    '--win-menu',
                    '--win-shortcut',
                    '--win-dir-chooser',
                    '--win-per-user-install'
            ]
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'mypackage.sampleapp.Launcher'
        )
    }
    doLast {
        println "Jar task completed with manifest attributes: ${manifest.attributes}"
    }
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': 'mypackage.sampleapp.Launcher'
    }
    doLast {
        println "ShadowJar task completed with manifest attributes: ${manifest.attributes}"
    }
}